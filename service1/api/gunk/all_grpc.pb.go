// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrgProfileServiceClient is the client API for OrgProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrgProfileServiceClient interface {
	// Upsert org profile.
	UpsertProfile(ctx context.Context, in *UpsertProfileRequest, opts ...grpc.CallOption) (*UpsertProfileResponse, error)
	// Get org profile by org ID.
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	// List org profiles.
	ListProfiles(ctx context.Context, in *ListProfilesRequest, opts ...grpc.CallOption) (*ListProfilesResponse, error)
}

type orgProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgProfileServiceClient(cc grpc.ClientConnInterface) OrgProfileServiceClient {
	return &orgProfileServiceClient{cc}
}

func (c *orgProfileServiceClient) UpsertProfile(ctx context.Context, in *UpsertProfileRequest, opts ...grpc.CallOption) (*UpsertProfileResponse, error) {
	out := new(UpsertProfileResponse)
	err := c.cc.Invoke(ctx, "/service1.OrgProfileService/UpsertProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgProfileServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, "/service1.OrgProfileService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orgProfileServiceClient) ListProfiles(ctx context.Context, in *ListProfilesRequest, opts ...grpc.CallOption) (*ListProfilesResponse, error) {
	out := new(ListProfilesResponse)
	err := c.cc.Invoke(ctx, "/service1.OrgProfileService/ListProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgProfileServiceServer is the server API for OrgProfileService service.
// All implementations must embed UnimplementedOrgProfileServiceServer
// for forward compatibility
type OrgProfileServiceServer interface {
	// Upsert org profile.
	UpsertProfile(context.Context, *UpsertProfileRequest) (*UpsertProfileResponse, error)
	// Get org profile by org ID.
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	// List org profiles.
	ListProfiles(context.Context, *ListProfilesRequest) (*ListProfilesResponse, error)
	mustEmbedUnimplementedOrgProfileServiceServer()
}

// UnimplementedOrgProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrgProfileServiceServer struct {
}

func (UnimplementedOrgProfileServiceServer) UpsertProfile(context.Context, *UpsertProfileRequest) (*UpsertProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertProfile not implemented")
}
func (UnimplementedOrgProfileServiceServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedOrgProfileServiceServer) ListProfiles(context.Context, *ListProfilesRequest) (*ListProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfiles not implemented")
}
func (UnimplementedOrgProfileServiceServer) mustEmbedUnimplementedOrgProfileServiceServer() {}

// UnsafeOrgProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrgProfileServiceServer will
// result in compilation errors.
type UnsafeOrgProfileServiceServer interface {
	mustEmbedUnimplementedOrgProfileServiceServer()
}

func RegisterOrgProfileServiceServer(s grpc.ServiceRegistrar, srv OrgProfileServiceServer) {
	s.RegisterService(&OrgProfileService_ServiceDesc, srv)
}

func _OrgProfileService_UpsertProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgProfileServiceServer).UpsertProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service1.OrgProfileService/UpsertProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgProfileServiceServer).UpsertProfile(ctx, req.(*UpsertProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgProfileService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgProfileServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service1.OrgProfileService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgProfileServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrgProfileService_ListProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgProfileServiceServer).ListProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service1.OrgProfileService/ListProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgProfileServiceServer).ListProfiles(ctx, req.(*ListProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrgProfileService_ServiceDesc is the grpc.ServiceDesc for OrgProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrgProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service1.OrgProfileService",
	HandlerType: (*OrgProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpsertProfile",
			Handler:    _OrgProfileService_UpsertProfile_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _OrgProfileService_GetProfile_Handler,
		},
		{
			MethodName: "ListProfiles",
			Handler:    _OrgProfileService_ListProfiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "microServices/service1/api/gunk/all.proto",
}
